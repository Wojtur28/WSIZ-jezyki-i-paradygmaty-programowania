(defun merge-lists (list1 list2)
  (append list1 list2))

(defun reverse-list (lst)
  (reverse lst))

(defun is-palindrome (lst)
  (equal lst (reverse lst)))

(defun sort-ascending (lst)
  (sort (copy-list lst) #'<))

(defun multiply-pairwise (list1 list2)
  (mapcar #'* list1 list2))

(defun count-divisible-by-three (lst)
  (reduce (lambda (count x) 
            (if (zerop (mod x 3))
                (1+ count)
                count))
          lst
          :initial-value 0))

(defun count-divisible-by-n (lst n)
  (reduce (lambda (count x) 
            (if (zerop (mod x n))
                (1+ count)
                count))
          lst
          :initial-value 0))

(defun filter-divisible-by-five-reversed (stack)
  (reverse (remove-if-not (lambda (x) (zerop (mod x 5))) stack)))

(defun generate-range (a b)
  (loop for i from a to b collect i))

(defun generate-ascii-char-list (start end)
  (loop for i from start to end collect (code-char i)))

(defun main-menu ()
  (format t "Wybierz opcję od 1 do 10:")
  (format t "~%1: Połącz dwie listy")
  (format t "~%2: Odwróć listę")
  (format t "~%3: Sprawdź, czy lista jest palindromem")
  (format t "~%4: Sortuj listę rosnąco")
  (format t "~%5: Iloczyn dwóch list")
  (format t "~%6: Zlicz liczby podzielne przez trzy")
  (format t "~%7: Zlicz liczby podzielne przez N")
  (format t "~%8: Wybierz liczby podzielne przez 5 i odwróć je")
  (format t "~%9: Generuj listę liczb z przedziału")
  (format t "~%10: Generuj listę znaków ASCII~%")

  (let ((choice (read)))
    (case choice
      (1 (merge-lists-func))   
      (2 (reverse-list-func))
      (3 (is-palindrome-func))
      (4 (sort-ascending-func))
      (5 (multiply-pairwise-func))
      (6 (count-divisible-by-three-func))
      (7 (count-divisible-by-n-func))
      (8 (filter-divisible-by-five-reversed-func))
      (9 (generate-range-func))
      (10 (generate-ascii-char-list-func))
      (otherwise (format t "~%Nieprawidłowa opcja.")))))

(defun merge-lists-func ()
  (format t "Wprowadź pierwszą listę (np. (1 2 3)): ")
  (let ((list1 (read)))
    (format t "Wprowadź drugą listę (np. (4 5 6)): ")
    (let ((list2 (read)))
      (format t "Połączona lista: ~a~%" (merge-lists list1 list2)))
    (return-to-menu)))

(defun reverse-list-func ()
  (format t "Wprowadź listę do odwrócenia (np. (1 2 3)): ")
  (let ((list (read)))
    (format t "Odwrócona lista: ~a~%" (reverse-list list))
    (return-to-menu)))

(defun is-palindrome-func ()
  (format t "Wprowadź listę (np. (1 2 3 2 1)): ")
  (let ((list (read)))
    (if (is-palindrome list)
        (format t "Lista jest palindromem.")
        (format t "Lista nie jest palindromem."))
    (return-to-menu)))

(defun sort-ascending-func ()
  (format t "Wprowadź listę liczb do posortowania (np. (3 1 4 1 5)): ")
  (let ((list (read)))
    (let ((sorted-list (sort-ascending list)))
      (format t "Posortowana lista: ~a~%" sorted-list))
    (return-to-menu)))

(defun multiply-pairwise-func ()
  (format t "Wprowadź pierwszą listę liczb (np. (1 2 3)): ")
  (let ((list1 (read)))
    (format t "Wprowadź drugą listę liczb (np. (4 5 6)): ")
    (let ((list2 (read)))
      (let ((product-list (multiply-pairwise list1 list2)))
        (format t "Lista iloczynów: ~a~%" product-list))
      (return-to-menu))))

(defun count-divisible-by-three-func ()
  (format t "Wprowadź listę liczb (np. (3 6 7 9 12)): ")
  (let ((list (read)))
    (let ((count (count-divisible-by-three list)))
      (format t "Liczba elementów podzielnych przez trzy: ~a~%" count))
    (return-to-menu)))

(defun count-divisible-by-n-func ()
  (format t "Wprowadź listę liczb (np. (3 6 7 9 12)): ")
  (let ((list (read)))
    (format t "Wprowadź liczbę N: ")
    (let ((n (read)))
      (let ((count (count-divisible-by-n list n)))
        (format t "Liczba elementów podzielnych przez ~a: ~a~%" n count))
      (return-to-menu))))

(defun filter-divisible-by-five-reversed-func ()
  (format t "Wprowadź stos liczb (np. (10 20 15 3 5)): ")
  (let ((stack (read)))
    (let ((filtered-reversed-stack (filter-divisible-by-five-reversed stack)))
      (format t "Stos wartości podzielnych przez 5 (odwrócony): ~a~%" filtered-reversed-stack))
    (return-to-menu)))

(defun generate-range-func ()
  (format t "Wprowadź dolną granicę przedziału A: ")
  (let ((a (read)))
    (format t "Wprowadź górną granicę przedziału B: ")
    (let ((b (read)))
      (let ((range (generate-range a b)))
        (format t "Wygenerowana lista liczb całkowitych z przedziału <~a, ~a>: ~a~%" a b range))
      (return-to-menu))))

(defun generate-ascii-char-list-func ()
  (format t "Wprowadź dolny kod ASCII: ")
  (let ((start (read)))
    (format t "Wprowadź górny kod ASCII: ")
    (let ((end (read)))
      (let ((ascii-list (generate-ascii-char-list start end)))
        (format t "Lista znaków ASCII z zakresu ~a do ~a: ~a~%" start end ascii-list))
      (return-to-menu))))

(defun return-to-menu ()
  (format t "Naciśnij dowolny klawisz, aby wrócić do menu głównego.")
  (read)
  (main-menu))

(main-menu)